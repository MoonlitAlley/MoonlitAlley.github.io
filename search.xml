<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>travel</title>
    <url>/2020/09/15/travel/</url>
    <content><![CDATA[<p><img src="/2020/09/15/travel/082.jpeg"></p>
]]></content>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>六艺</title>
    <url>/2020/10/09/%E5%85%AD%E8%89%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>travel</title>
    <url>/2020/09/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>基础搭建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;cbf8ba8af532</span><br></pre></td></tr></table></figure>
<p>官方手册</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;theme-next.iissnan.com&#x2F;getting-started.html</span><br></pre></td></tr></table></figure>

<p>阅读全文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>添加搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;112f3eae2098</span><br></pre></td></tr></table></figure>

<p>添加评论功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;83cf3e358c8e</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;jiunian_2761&#x2F;article&#x2F;details&#x2F;97388997</span><br></pre></td></tr></table></figure>
<p><img src="/2020/09/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/comments.png"></p>
<p>1.新建一个页面，命名为categories:</p>
<p>hexo new page categories</p>
<p>之所以命名为categories的原因是在next主题的配置文件中，categories是关键词。</p>
<p>2.编辑新建界面，将页面类型设置为categories，主题将会在这个页面上显示所有的分类：</p>
<hr>
<p>title: categories<br>date: 2018-03-02 12:33:16<br>type: “categories”</p>
<hr>
<p>这个步骤很有意思，编辑新建界面是什么？当然hexo熟悉一些自然会知道，但是小萌新还是比较懵逼的。实际上调用hexo new page xxx后，会在/source/categories/目录下生成一个index.md文档，在此文档头部加上上面这段即可。实际上，index.md里只需要有这个声明即可，其他内容并不会显示出来，写了也没用。</p>
<p>PS. 无论是page，还是post的文章，都是以.md格式结尾，在hexo g的过程中会产生对应的.html文档，然后hexo d到Github上的也只是html文档，不是.md格式的文档。</p>
<p>另外就是，需要注意一点：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p>
<hr>
<p>title: categories<br>date: 2018-03-02 12:33:16<br>type: “categories”<br>comments: false</p>
<hr>
]]></content>
      <categories>
        <category>搭建</category>
      </categories>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang项目的常用库</title>
    <url>/2021/01/31/Golang%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BA%93/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p><a href="https://github.com/spf13/cast">spf13/cast</a></p>
<h4 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h4><blockquote>
<p>Easy and safe casting from one type to another in Go</p>
<blockquote>
<p>Cast is a library to convert between different go types in a consistent and easy way.</p>
</blockquote>
</blockquote>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>Example ‘ToString’:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cast.ToString(&quot;mayonegg&quot;)         &#x2F;&#x2F; &quot;mayonegg&quot;</span><br><span class="line">cast.ToString(8)                  &#x2F;&#x2F; &quot;8&quot;</span><br><span class="line">cast.ToString(8.31)               &#x2F;&#x2F; &quot;8.31&quot;</span><br><span class="line">cast.ToString([]byte(&quot;one time&quot;)) &#x2F;&#x2F; &quot;one time&quot;</span><br><span class="line">cast.ToString(nil)                &#x2F;&#x2F; &quot;&quot;</span><br><span class="line"></span><br><span class="line">var foo interface&#123;&#125; &#x3D; &quot;one more time&quot;</span><br><span class="line">cast.ToString(foo)                &#x2F;&#x2F; &quot;one more time&quot;</span><br></pre></td></tr></table></figure>
<p>当我们在项目（be-derive）中需要根据配置来决定返回值类型时，可以使用cast在最后阶段完成一个“统一的操作”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func (this *Derive) formatCalcResult(val interface&#123;&#125;, typeName string) interface&#123;&#125; &#123;</span><br><span class="line">	switch typeName &#123;</span><br><span class="line">	case &quot;float&quot;:</span><br><span class="line">		fallthrough</span><br><span class="line">	case &quot;double&quot;:</span><br><span class="line">		return math.Trunc(cast.ToFloat64(val)*1e2+0.5) * 1e-2</span><br><span class="line">	case &quot;int&quot;:</span><br><span class="line">		return math.Trunc(cast.ToFloat64(val))</span><br><span class="line">	default:</span><br><span class="line">		return val</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="json处理"><a href="#json处理" class="headerlink" title="json处理"></a>json处理</h2><p><a href="https://github.com/tidwall/gjson">tidwall/gjson</a><br><a href="https://github.com/tidwall/sjson">tidwall/sjon</a></p>
<h4 id="官方说明-1"><a href="#官方说明-1" class="headerlink" title="官方说明"></a>官方说明</h4><blockquote>
<p> GJSON is a Go package that provides a fast and simple way to get values from a json document. It has features such as one line retrieval, dot notation paths, iteration, and parsing json lines.</p>
</blockquote>
<blockquote>
<p> SJSON is a Go package that provides a very fast and simple way to set a value in a json document. The purpose for this library is to provide efficient json updating for the SummitDB project. For quickly retrieving json values check out GJSON.</p>
</blockquote>
<h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>To unmarshal to a map[string]interface{}:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m, ok :&#x3D; gjson.Parse(json).Value().(map[string]interface&#123;&#125;)</span><br><span class="line">if !ok &#123;</span><br><span class="line">	&#x2F;&#x2F; not a map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Get a json value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if !gjson.Valid(json) &#123;</span><br><span class="line">	return errors.New(&quot;invalid json&quot;)</span><br><span class="line">&#125;</span><br><span class="line">value :&#x3D; gjson.Get(json, &quot;name.last&quot;)</span><br></pre></td></tr></table></figure>
<p>Set vlaue to a empty string or json string</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">value, _ :&#x3D; sjson.Set(&quot;&quot;, &quot;name.last&quot;, &quot;Anderson&quot;)</span><br><span class="line">println(value)</span><br><span class="line">&#x2F;&#x2F; Output:</span><br><span class="line">&#x2F;&#x2F; &#123;&quot;name&quot;:&#123;&quot;last&quot;:&quot;Anderson&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">value, _ :&#x3D; sjson.Set(&#96;&#123;&quot;name&quot;:&#123;&quot;last&quot;:&quot;Anderson&quot;&#125;&#125;&#96;, &quot;name.first&quot;, &quot;Sara&quot;)</span><br><span class="line">println(value)</span><br><span class="line">&#x2F;&#x2F; Output:</span><br><span class="line">&#x2F;&#x2F; &#123;&quot;name&quot;:&#123;&quot;first&quot;:&quot;Sara&quot;,&quot;last&quot;:&quot;Anderson&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>以下代码（arch-tool）的功能为：将kv为jsonpath类型的字符串，转化为标准的json格式<br>from <code>&#123;&quot;a.b.c&quot;:1, &quot;a.d&quot;:true&#125;</code> to <code>&#123;&quot;a&quot;:&#123;&quot;b&quot;:&#123;&quot;c&quot;:1&#125;, &quot;d&quot;:true&#125;&#125;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aeFeatures :&#x3D; make(map[string]interface&#123;&#125;)</span><br><span class="line">err :&#x3D; json.Unmarshal([]byte(gjson.Get(aeItemStr, &quot;features&quot;).Raw), &amp;aeFeatures)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">	log.Println(fmt.Sprintf(&quot;json.Unmarshal aeItemStr features err&#x3D;%v&quot;, err))</span><br><span class="line">	continue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">profileFeaturesStr :&#x3D; &#96;&#123; &#125;&#96;</span><br><span class="line">for featuresKey, featuresValue :&#x3D; range aeFeatures &#123;</span><br><span class="line">	profileFeaturesStr, _ &#x3D; sjson.Set(profileFeaturesStr, featuresKey, featuresValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h1><p><a href="https://github.com/parnurzeal/gorequest">parnurzeal/gorequest</a></p>
<h4 id="官方说明-2"><a href="#官方说明-2" class="headerlink" title="官方说明"></a>官方说明</h4><blockquote>
<p>GoRequest – Simplified HTTP client ( inspired by famous SuperAgent lib in Node.js )</p>
<blockquote>
<p>GoRequest makes thing much more simple for you, making http client more awesome and fun like SuperAgent + golang style usage.</p>
</blockquote>
</blockquote>
<h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>Sth in oneline<br><code>resp, body, errs = gorequest.New().Timeout(time.Duration(inter.Timeout) * time.Millisecond).Proxy(&quot;http://proxy:999&quot;).Get(&quot;http://example-no-proxy.com&quot;).End()</code><br>Call Back:<br>Moreover, GoRequest also supports callback function. This gives you much more flexibility on using it. You can use it any way to match your own style! Let’s see a bit of callback example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func printStatus(resp gorequest.Response, body string, errs []error)&#123;</span><br><span class="line">  fmt.Println(resp.Status)</span><br><span class="line">&#125;</span><br><span class="line">gorequest.New().Get(&quot;http:&#x2F;&#x2F;example.com&quot;).End(printStatus)</span><br></pre></td></tr></table></figure>

<p>For a JSON POST with standard libraries, you might need to marshal map data structure to json format, set headers to ‘application/json’ (and other headers if you need to) and declare http.Client. So, your code becomes longer and harder to maintain:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m :&#x3D; map[string]interface&#123;&#125;&#123;</span><br><span class="line">  &quot;name&quot;: &quot;backy&quot;,</span><br><span class="line">  &quot;species&quot;: &quot;dog&quot;,</span><br><span class="line">&#125;</span><br><span class="line">mJson, _ :&#x3D; json.Marshal(m)</span><br><span class="line">contentReader :&#x3D; bytes.NewReader(mJson)</span><br><span class="line">req, _ :&#x3D; http.NewRequest(&quot;POST&quot;, &quot;http:&#x2F;&#x2F;example.com&quot;, contentReader)</span><br><span class="line">req.Header.Set(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;)</span><br><span class="line">req.Header.Set(&quot;Notes&quot;,&quot;GoRequest is coming!&quot;)</span><br><span class="line">client :&#x3D; &amp;http.Client&#123;&#125;</span><br><span class="line">resp, _ :&#x3D; client.Do(req)</span><br></pre></td></tr></table></figure>

<p>摘取了项目（ext-profile）中的使用示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request :&#x3D; gorequest.New().Timeout(time.Duration(inter.Timeout) * time.Millisecond)</span><br><span class="line">for key, value :&#x3D; range header &#123;</span><br><span class="line">	request.Header.Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line">for i :&#x3D; inter.Retries; i &gt; 0; i-- &#123;</span><br><span class="line">	resp, result, errs :&#x3D; request.Post(inter.Url).Send(body).End()</span><br><span class="line">	if err :&#x3D; resp.Body.Close(); err!&#x3D; nil &#123;</span><br><span class="line">		ilog.LogReqErr(ilog.LL_ERROR, &quot;async&quot;, feature.RequestId, &quot;resp body close err&quot;, err)</span><br><span class="line">	&#125;</span><br><span class="line">	if errs !&#x3D; nil &#123;</span><br><span class="line">		&#x2F;&#x2F;TODO log</span><br><span class="line">		ilog.LogReqErr(ilog.LL_ERROR, &quot;async&quot;, feature.RequestId, &quot;get third party result fail&quot;, errs)</span><br><span class="line">		continue</span><br><span class="line">	&#125;</span><br><span class="line">	return &amp;resultItem&#123;result: result, identification: inter.UrlName&#125;, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang module 收集</category>
      </categories>
      <tags>
        <tag>Gloang</tag>
      </tags>
  </entry>
</search>
