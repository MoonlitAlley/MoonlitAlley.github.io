<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>travel</title>
    <url>/2020/09/15/travel/</url>
    <content><![CDATA[<p><img src="/2020/09/15/travel/082.jpeg"></p>
]]></content>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>六艺</title>
    <url>/2020/10/09/%E5%85%AD%E8%89%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>travel</title>
    <url>/2020/09/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>基础搭建<br>    <a href="https://www.jianshu.com/p/cbf8ba8af532">https://www.jianshu.com/p/cbf8ba8af532</a><br>官方手册<br>    <a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a></p>
<p>阅读全文<br>    <a id="more"></a></p>
<p>添加搜索<br>    <a href="https://www.jianshu.com/p/112f3eae2098">https://www.jianshu.com/p/112f3eae2098</a></p>
<p>添加评论功能<br>    <a href="https://www.jianshu.com/p/83cf3e358c8e">https://www.jianshu.com/p/83cf3e358c8e</a></p>
<pre><code>https://blog.csdn.net/jiunian_2761/article/details/97388997</code></pre>
<p><a href></a></p>
<p>1.新建一个页面，命名为categories:</p>
<p>hexo new page categories</p>
<p>之所以命名为categories的原因是在next主题的配置文件中，categories是关键词。</p>
<p>2.编辑新建界面，将页面类型设置为categories，主题将会在这个页面上显示所有的分类：</p>
<hr>
<p>title: categories<br>date: 2018-03-02 12:33:16<br>type: “categories”</p>
<hr>
<p>这个步骤很有意思，编辑新建界面是什么？当然hexo熟悉一些自然会知道，但是小萌新还是比较懵逼的。实际上调用hexo new page xxx后，会在/source/categories/目录下生成一个index.md文档，在此文档头部加上上面这段即可。实际上，index.md里只需要有这个声明即可，其他内容并不会显示出来，写了也没用。</p>
<p>PS. 无论是page，还是post的文章，都是以.md格式结尾，在hexo g的过程中会产生对应的.html文档，然后hexo d到Github上的也只是html文档，不是.md格式的文档。</p>
<p>另外就是，需要注意一点：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p>
<hr>
<p>title: categories<br>date: 2018-03-02 12:33:16<br>type: “categories”<br>comments: false</p>
<hr>
]]></content>
      <categories>
        <category>搭建</category>
      </categories>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang项目的常用库</title>
    <url>/2021/01/31/Golang%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BA%93/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p><a href="https://github.com/spf13/cast">spf13/cast</a></p>
<h4 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h4><blockquote>
<p>Easy and safe casting from one type to another in Go</p>
<blockquote>
<p>Cast is a library to convert between different go types in a consistent and easy way.</p>
</blockquote>
</blockquote>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>Example ‘ToString’:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">cast.ToString(<span class="string">&quot;mayonegg&quot;</span>)         <span class="comment">// &quot;mayonegg&quot;</span></span><br><span class="line">cast.ToString(<span class="number">8</span>)                  <span class="comment">// &quot;8&quot;</span></span><br><span class="line">cast.ToString(<span class="number">8.31</span>)               <span class="comment">// &quot;8.31&quot;</span></span><br><span class="line">cast.ToString([]<span class="keyword">byte</span>(<span class="string">&quot;one time&quot;</span>)) <span class="comment">// &quot;one time&quot;</span></span><br><span class="line">cast.ToString(<span class="literal">nil</span>)                <span class="comment">// &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;one more time&quot;</span></span><br><span class="line">cast.ToString(foo)                <span class="comment">// &quot;one more time&quot;</span></span><br></pre></td></tr></table></figure>
<p>当我们在项目（be-derive）中需要根据配置来决定返回值类型时，可以使用cast在最后阶段完成一个“统一的操作”</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Derive)</span> <span class="title">formatCalcResult</span><span class="params">(val <span class="keyword">interface</span>&#123;&#125;, typeName <span class="keyword">string</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">	<span class="keyword">switch</span> typeName &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;float&quot;</span>:</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;double&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> math.Trunc(cast.ToFloat64(val)*<span class="number">1e2</span>+<span class="number">0.5</span>) * <span class="number">1e-2</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;int&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> math.Trunc(cast.ToFloat64(val))</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="json处理"><a href="#json处理" class="headerlink" title="json处理"></a>json处理</h2><p><a href="https://github.com/tidwall/gjson">tidwall/gjson</a><br><a href="https://github.com/tidwall/sjson">tidwall/sjon</a></p>
<h4 id="官方说明-1"><a href="#官方说明-1" class="headerlink" title="官方说明"></a>官方说明</h4><blockquote>
<p> GJSON is a Go package that provides a fast and simple way to get values from a json document. It has features such as one line retrieval, dot notation paths, iteration, and parsing json lines.</p>
</blockquote>
<blockquote>
<p> SJSON is a Go package that provides a very fast and simple way to set a value in a json document. The purpose for this library is to provide efficient json updating for the SummitDB project. For quickly retrieving json values check out GJSON.</p>
</blockquote>
<h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>To unmarshal to a map[string]interface{}:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m, ok :&#x3D; gjson.Parse(json).Value().(map[string]interface&#123;&#125;)</span><br><span class="line">if !ok &#123;</span><br><span class="line">	&#x2F;&#x2F; not a map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Get a json value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if !gjson.Valid(json) &#123;</span><br><span class="line">	return errors.New(&quot;invalid json&quot;)</span><br><span class="line">&#125;</span><br><span class="line">value :&#x3D; gjson.Get(json, &quot;name.last&quot;)</span><br></pre></td></tr></table></figure>
<p>Set vlaue to a empty string or json string</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">value, _ :&#x3D; sjson.Set(&quot;&quot;, &quot;name.last&quot;, &quot;Anderson&quot;)</span><br><span class="line">println(value)</span><br><span class="line">&#x2F;&#x2F; Output:</span><br><span class="line">&#x2F;&#x2F; &#123;&quot;name&quot;:&#123;&quot;last&quot;:&quot;Anderson&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">value, _ :&#x3D; sjson.Set(&#96;&#123;&quot;name&quot;:&#123;&quot;last&quot;:&quot;Anderson&quot;&#125;&#125;&#96;, &quot;name.first&quot;, &quot;Sara&quot;)</span><br><span class="line">println(value)</span><br><span class="line">&#x2F;&#x2F; Output:</span><br><span class="line">&#x2F;&#x2F; &#123;&quot;name&quot;:&#123;&quot;first&quot;:&quot;Sara&quot;,&quot;last&quot;:&quot;Anderson&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>以下代码（arch-tool）的功能为：将kv为jsonpath类型的字符串，转化为标准的json格式<br>from <code>&#123;&quot;a.b.c&quot;:1, &quot;a.d&quot;:true&#125;</code> to <code>&#123;&quot;a&quot;:&#123;&quot;b&quot;:&#123;&quot;c&quot;:1&#125;, &quot;d&quot;:true&#125;&#125;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aeFeatures :&#x3D; make(map[string]interface&#123;&#125;)</span><br><span class="line">err :&#x3D; json.Unmarshal([]byte(gjson.Get(aeItemStr, &quot;features&quot;).Raw), &amp;aeFeatures)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">	log.Println(fmt.Sprintf(&quot;json.Unmarshal aeItemStr features err&#x3D;%v&quot;, err))</span><br><span class="line">	continue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">profileFeaturesStr :&#x3D; &#96;&#123; &#125;&#96;</span><br><span class="line">for featuresKey, featuresValue :&#x3D; range aeFeatures &#123;</span><br><span class="line">	profileFeaturesStr, _ &#x3D; sjson.Set(profileFeaturesStr, featuresKey, featuresValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h1><p><a href="https://github.com/parnurzeal/gorequest">parnurzeal/gorequest</a></p>
<h4 id="官方说明-2"><a href="#官方说明-2" class="headerlink" title="官方说明"></a>官方说明</h4><blockquote>
<p>GoRequest – Simplified HTTP client ( inspired by famous SuperAgent lib in Node.js )</p>
<blockquote>
<p>GoRequest makes thing much more simple for you, making http client more awesome and fun like SuperAgent + golang style usage.</p>
</blockquote>
</blockquote>
<h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>Sth in oneline<br><code>resp, body, errs = gorequest.New().Timeout(time.Duration(inter.Timeout) * time.Millisecond).Proxy(&quot;http://proxy:999&quot;).Get(&quot;http://example-no-proxy.com&quot;).End()</code><br>Call Back:<br>Moreover, GoRequest also supports callback function. This gives you much more flexibility on using it. You can use it any way to match your own style! Let’s see a bit of callback example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func printStatus(resp gorequest.Response, body string, errs []error)&#123;</span><br><span class="line">  fmt.Println(resp.Status)</span><br><span class="line">&#125;</span><br><span class="line">gorequest.New().Get(&quot;http:&#x2F;&#x2F;example.com&quot;).End(printStatus)</span><br></pre></td></tr></table></figure>

<p>For a JSON POST with standard libraries, you might need to marshal map data structure to json format, set headers to ‘application/json’ (and other headers if you need to) and declare http.Client. So, your code becomes longer and harder to maintain:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m :&#x3D; map[string]interface&#123;&#125;&#123;</span><br><span class="line">  &quot;name&quot;: &quot;backy&quot;,</span><br><span class="line">  &quot;species&quot;: &quot;dog&quot;,</span><br><span class="line">&#125;</span><br><span class="line">mJson, _ :&#x3D; json.Marshal(m)</span><br><span class="line">contentReader :&#x3D; bytes.NewReader(mJson)</span><br><span class="line">req, _ :&#x3D; http.NewRequest(&quot;POST&quot;, &quot;http:&#x2F;&#x2F;example.com&quot;, contentReader)</span><br><span class="line">req.Header.Set(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;)</span><br><span class="line">req.Header.Set(&quot;Notes&quot;,&quot;GoRequest is coming!&quot;)</span><br><span class="line">client :&#x3D; &amp;http.Client&#123;&#125;</span><br><span class="line">resp, _ :&#x3D; client.Do(req)</span><br></pre></td></tr></table></figure>

<p>摘取了项目（ext-profile）中的使用示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request :&#x3D; gorequest.New().Timeout(time.Duration(inter.Timeout) * time.Millisecond)</span><br><span class="line">for key, value :&#x3D; range header &#123;</span><br><span class="line">	request.Header.Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line">for i :&#x3D; inter.Retries; i &gt; 0; i-- &#123;</span><br><span class="line">	resp, result, errs :&#x3D; request.Post(inter.Url).Send(body).End()</span><br><span class="line">	if err :&#x3D; resp.Body.Close(); err!&#x3D; nil &#123;</span><br><span class="line">		ilog.LogReqErr(ilog.LL_ERROR, &quot;async&quot;, feature.RequestId, &quot;resp body close err&quot;, err)</span><br><span class="line">	&#125;</span><br><span class="line">	if errs !&#x3D; nil &#123;</span><br><span class="line">		&#x2F;&#x2F;TODO log</span><br><span class="line">		ilog.LogReqErr(ilog.LL_ERROR, &quot;async&quot;, feature.RequestId, &quot;get third party result fail&quot;, errs)</span><br><span class="line">		continue</span><br><span class="line">	&#125;</span><br><span class="line">	return &amp;resultItem&#123;result: result, identification: inter.UrlName&#125;, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang module 收集</category>
      </categories>
      <tags>
        <tag>Gloang</tag>
      </tags>
  </entry>
  <entry>
    <title>偏安一隅</title>
    <url>/2021/01/31/%E5%81%8F%E5%AE%89%E4%B8%80%E9%9A%85/</url>
    <content><![CDATA[<p>出发：朝阳区来广营去往箭扣长城路上<br>mey be 范崎路<img src="/2021/01/31/%E5%81%8F%E5%AE%89%E4%B8%80%E9%9A%85/082.jpeg"><br><img src="/2021/01/31/%E5%81%8F%E5%AE%89%E4%B8%80%E9%9A%85/QQ20210131-3.jpg"><br><img src="/2021/01/31/%E5%81%8F%E5%AE%89%E4%B8%80%E9%9A%85/082.jpeg"></p>
<p>反正从我来到这个城市以后，没有再现过“苍穹之下”的天气了<br><img src="/2021/01/31/%E5%81%8F%E5%AE%89%E4%B8%80%E9%9A%85/QQ20210131-0.jpg"><br><img src="/2021/01/31/%E5%81%8F%E5%AE%89%E4%B8%80%E9%9A%85/QQ20210131-1.jpg"><br>写满了安静</p>
]]></content>
      <categories>
        <category>剪影</category>
      </categories>
      <tags>
        <tag>北京</tag>
      </tags>
  </entry>
  <entry>
    <title>vcpkg使用示例</title>
    <url>/2021/04/10/vcpkg%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>尝试一次之后： 泪流满面， 后悔自己昨天还在熬夜编译一个第三方库文件</p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul>
<li><a href="https://docs.microsoft.com/zh-cn/cpp/build/vcpkg?view=msvc-160">Microsoft vcpkg：适用于C++ 的包管理器</a></li>
<li><a href="https://github.com/Microsoft/vcpkg">github microsoft/vcpkg</a></li>
<li><a href="https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md">vcpkg/README_zh_CN.md</a></li>
<li><a href="https://github.com/microsoft/vcpkg/blob/master/docs/examples/installing-and-using-packages.md">vcpkg/docs/examples/installing-and-using-packages</a></li>
</ul>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>示例项目中依赖nlohmann_json、 gflags两个第三方库文件，其中</p>
<ul>
<li>nlohmann_json 仅需要导入头文件</li>
<li>gflags 需要引入头文件，同时链接动态库文件<br>该项目主要功能为通过gflags功能读取配置文件中的参数，将参数值放入json对象中，并打印到屏幕<br><a href="https://github.com/MoonlitAlley/vc_test">项目链接</a></li>
</ul>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">» tree -L 1</span><br><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── flags.conf</span><br><span class="line">├── main.cpp</span><br><span class="line">└── vcpkg</span><br><span class="line"></span><br><span class="line">2 directories, 3 files</span><br></pre></td></tr></table></figure>

<p>cat flags.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--storage_config&#x3D;test_storage</span><br></pre></td></tr></table></figure>
<h4 id="如何编写CMakeLists-txt"><a href="#如何编写CMakeLists-txt" class="headerlink" title="如何编写CMakeLists.txt"></a>如何编写CMakeLists.txt</h4><blockquote>
<p>在CMakeLists.txt中直接设置CMAKE_TOOLCHAIN_FILE，此种方式可无需设置 CMAKE_TOOLCHAIN_FILE 即可使用vcpkg，且更容易完成配置工作。<br>文件中的find_package与target_link_libraries均有vcpkg直接提供，用户只需要复制到自己的CMakeLists.txt文件中即可使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; cat CMakeLists.txt</span><br><span class="line">cmake_minimum_required(VERSION 3.17)</span><br><span class="line">set(CMAKE_TOOLCHAIN_FILE $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;vcpkg&#x2F;scripts&#x2F;buildsystems&#x2F;vcpkg.cmake</span><br><span class="line">        CACHE STRING &quot;Vcpkg toolchain file&quot;)</span><br><span class="line"></span><br><span class="line">project(vc_test)</span><br><span class="line">set(CMAKE_CXX_STANDARD 14)</span><br><span class="line"></span><br><span class="line">find_package(nlohmann_json CONFIG REQUIRED)</span><br><span class="line">find_package(gflags CONFIG REQUIRED)</span><br><span class="line"></span><br><span class="line">add_executable(vc_test main.cpp)</span><br><span class="line">target_link_libraries(vc_test PRIVATE nlohmann_json nlohmann_json::nlohmann_json)</span><br><span class="line">target_link_libraries(vc_test PRIVATE gflags_static)</span><br></pre></td></tr></table></figure>


<p>源代码文件如下（gflags用法可以参考官方库文档）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; cat main.cpp</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;nlohmann&#x2F;json.hpp&quot;</span><br><span class="line">#include &quot;gflags&#x2F;gflags.h&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; DECLARE_string(storage_config);</span><br><span class="line">DEFINE_string(storage_config, &quot;test_default&quot;, &quot;storage_config&quot;);</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">    nlohmann::json json_value &#x3D; nlohmann::json::object();</span><br><span class="line">    std::cout &lt;&lt; argv &lt;&lt; std::endl;</span><br><span class="line">    gflags::ParseCommandLineFlags(&amp;argc, &amp;argv, true);</span><br><span class="line"></span><br><span class="line">    json_value[FLAGS_storage_config] &#x3D; &quot;get_any_storage&quot;;</span><br><span class="line">    json_value[&quot;test_key&quot;] &#x3D; &quot;test_value&quot;;</span><br><span class="line">    std::cout &lt;&lt; json_value.dump() &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="执行及输出结果"><a href="#执行及输出结果" class="headerlink" title="执行及输出结果"></a>执行及输出结果</h4><p>项目执行需设置flags参数路径<br><img src="/2021/04/10/vcpkg%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/vc_test_build.png"><br>执行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Users&#x2F;momboguo&#x2F;Downloads&#x2F;workspace&#x2F;ishumei&#x2F;arch&#x2F;vc-test&#x2F;cmake-build-debug&#x2F;vc_test -flagfile&#x3D;..&#x2F;flags.conf</span><br><span class="line">0x7ffeebd27a48</span><br><span class="line">&#123;&quot;test_key&quot;:&quot;test_value&quot;,&quot;test_storage&quot;:&quot;get_any_storage&quot;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>


<h3 id="vcpkg介绍"><a href="#vcpkg介绍" class="headerlink" title="vcpkg介绍"></a>vcpkg介绍</h3><h4 id="在-macOS-上复制和设置-vcpkg"><a href="#在-macOS-上复制和设置-vcpkg" class="headerlink" title="在 macOS 上复制和设置 vcpkg"></a>在 macOS 上复制和设置 vcpkg</h4><ol>
<li>在“终端”窗口中，为 vcpkg 的克隆实例创建目录。 如果打算为不同的生成目标安装库，最好在目录名称中包含目标。 建议使用短路径名称（不含空格）（如 ./macos 或 ./iot），否则，某些端口生成系统可能会出现路径问题 。 在“终端”窗口中，切换到刚刚创建的目录。</li>
<li>从 GitHub 克隆 vcpkg 存储库：<a href="https://github.com/Microsoft/vcpkg%E3%80%82">https://github.com/Microsoft/vcpkg。</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;vcpkg</span><br></pre></td></tr></table></figure>
 此命令在 vcpkg 子目录中创建存储库的本地副本。 此位置是此 vcpkg 克隆的 vcpkg 根目录。</li>
<li>接下来，切换到 vcpkg 根目录，并运行 vcpkg 引导程序命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bootstrap-vcpkg.sh</span><br></pre></td></tr></table></figure>
 引导程序将使用编译器、工具和标准库的位置配置 vcpkg。</li>
</ol>
<h4 id="CLion-中使用-vcpkg"><a href="#CLion-中使用-vcpkg" class="headerlink" title="CLion 中使用 vcpkg"></a>CLion 中使用 vcpkg</h4><p>打开 Toolchains 设置 (File &gt; Settings on Windows and Linux, CLion &gt; Preferences on macOS)， 并打开 CMake 设置 (Build, Execution, Deployment &gt; CMake)。 最后在 CMake options 中添加以下行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-DCMAKE_TOOLCHAIN_FILE&#x3D;[vcpkg root]&#x2F;scripts&#x2F;buildsystems&#x2F;vcpkg.cmake</span><br></pre></td></tr></table></figure>
<p>遗憾的是，您必须手动将此选项加入每个项目配置文件中。</p>
<h4 id="将-vcpkg-作为一个子模块"><a href="#将-vcpkg-作为一个子模块" class="headerlink" title="将 vcpkg 作为一个子模块"></a>将 vcpkg 作为一个子模块</h4><p>当您希望将vcpkg作为一个子模块加入到您的工程中时， 您可以在第一个 project() 调用之前将以下内容添加到 CMakeLists.txt 中， 而无需将 CMAKE_TOOLCHAIN_FILE 传递给cmake调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set(CMAKE_TOOLCHAIN_FILE $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;vcpkg&#x2F;scripts&#x2F;buildsystems&#x2F;vcpkg.cmake CACHE STRING &quot;Vcpkg toolchain file&quot;)</span><br></pre></td></tr></table></figure>
<p>使用此种方式可无需设置 CMAKE_TOOLCHAIN_FILE 即可使用vcpkg，且更容易完成配置工作。</p>
<h4 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h4><p>使用vcpkg安装json、gflags库（傻瓜式操作）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg(master) » .&#x2F;vcpkg install nlohmann-json</span><br><span class="line">Computing installation plan...</span><br><span class="line">The following packages are already installed:</span><br><span class="line">    nlohmann-json[core]:x64-osx -&gt; 3.9.1</span><br><span class="line">Package nlohmann-json:x64-osx is already installed</span><br><span class="line"></span><br><span class="line">Total elapsed time: 778 us</span><br><span class="line"></span><br><span class="line">The package nlohmann-json:x64-osx provides CMake targets:</span><br><span class="line"></span><br><span class="line">    find_package(nlohmann_json CONFIG REQUIRED)</span><br><span class="line">    target_link_libraries(main PRIVATE nlohmann_json nlohmann_json::nlohmann_json)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vcpkg(master) » .&#x2F;vcpkg install gflags</span><br><span class="line">Computing installation plan...</span><br><span class="line">The following packages are already installed:</span><br><span class="line">    gflags[core]:x64-osx -&gt; 2.2.2-1</span><br><span class="line">Package gflags:x64-osx is already installed</span><br><span class="line"></span><br><span class="line">Total elapsed time: 367 us</span><br><span class="line"></span><br><span class="line">The package gflags:x64-osx provides CMake targets:</span><br><span class="line"></span><br><span class="line">    find_package(gflags CONFIG REQUIRED)</span><br><span class="line">    target_link_libraries(main PRIVATE gflags_static gflags::gflags_static)</span><br></pre></td></tr></table></figure>

<h4 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg(master) » tree -L 1</span><br><span class="line">.</span><br><span class="line">├── CHANGELOG.md</span><br><span class="line">├── CONTRIBUTING.md</span><br><span class="line">├── LICENSE.txt</span><br><span class="line">├── NOTICE.txt</span><br><span class="line">├── README.md</span><br><span class="line">├── README_es.md</span><br><span class="line">├── README_fr.md</span><br><span class="line">├── README_ko_KR.md</span><br><span class="line">├── README_zh_CN.md</span><br><span class="line">├── bootstrap-vcpkg.bat</span><br><span class="line">├── bootstrap-vcpkg.sh</span><br><span class="line">├── buildtrees</span><br><span class="line">├── docs</span><br><span class="line">├── downloads</span><br><span class="line">├── installed</span><br><span class="line">├── packages</span><br><span class="line">├── ports</span><br><span class="line">├── scripts</span><br><span class="line">├── toolsrc</span><br><span class="line">├── triplets</span><br><span class="line">├── vcpkg</span><br><span class="line">└── versions</span><br><span class="line"></span><br><span class="line">10 directories, 12 files</span><br></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vcpkg(master) » ./vcpkg search json</span><br><span class="line">arrow[json]                           JSON file support</span><br><span class="line">bitserializer        0.10             Core part of C++ 17 library <span class="keyword">for</span> serialization to JSON, XML, YAML</span><br><span class="line">bitserializer[cpprestjson-archive]    Module <span class="keyword">for</span> support JSON (implementation based on the CppRestSDK library)</span><br><span class="line">bitserializer[pugixml-archive]        Module <span class="keyword">for</span> support XML (implementation based on the PugiXml library)</span><br><span class="line">bitserializer[rapidjson-archive]      Module <span class="keyword">for</span> support JSON (implementation based on the RapidJson library)</span><br><span class="line">bitserializer[rapidyaml-archive]      Module <span class="keyword">for</span> support YAML (implementation based on the RapidYaml library)</span><br><span class="line">bitserializer-cpp... <span class="built_in">alias</span>            Deprecated <span class="built_in">alias</span> <span class="keyword">for</span> bitserializer-cpprestjson</span><br><span class="line">bitserializer-rap... <span class="built_in">alias</span>            Deprecated <span class="built_in">alias</span> <span class="keyword">for</span> bitserializer-rapidjson</span><br><span class="line">boost-json           1.75.0           Boost json module</span><br><span class="line">cereal               1.3.0            a header-only C++11 serialization library (built <span class="keyword">in</span> support <span class="keyword">for</span> binary, XML an...</span><br><span class="line">cjson                2019-11-30-1     Ultralightweight JSON parser <span class="keyword">in</span> ANSI C</span><br><span class="line">cjson[utils]                          Enable building the cJSON_Utils library</span><br><span class="line">cpprestsdk           2.10.17          C++11 JSON, REST, and OAuth library</span><br><span class="line">cpprestsdk[brotli]                    Brotli compression support</span><br><span class="line">cpprestsdk[compression]               HTTP Compression support</span><br><span class="line">cpprestsdk[default-features]          Features installed by default</span><br><span class="line">cpprestsdk[websockets]                Websockets support</span><br><span class="line">jansson              2.13.1           Jansson is a C library <span class="keyword">for</span> encoding, decoding and manipulating JSON data</span><br><span class="line">jsmn                 2019-04-27       A minimalistic JSON parser <span class="keyword">in</span> C.</span><br><span class="line">json-c               2019-09-10<span class="comment">#1     A JSON implementation in C</span></span><br><span class="line">json-dto             0.2.11           A small header-only library <span class="keyword">for</span> converting data between json representation an...</span><br><span class="line">json-schema-valid... 2.1.0            This is a C++ library <span class="keyword">for</span> validating JSON documents based on a JSON Schema. Th...</span><br><span class="line">json-spirit          4.1.0-1          json parser using boost library</span><br><span class="line">json11               2017-06-20-2     json11 is a tiny JSON library <span class="keyword">for</span> C++11, providing JSON parsing and serializat...</span><br><span class="line">json5-parser         1.0.0<span class="comment">#2          An enhancement of the JSON Spirit C++ library to understand json5.</span></span><br><span class="line">jsoncons             0.159.0          A C++, header-only library <span class="keyword">for</span> constructing JSON and JSON-like text and binary...</span><br><span class="line">jsoncpp              1.9.4            jsoncpp is an implementation of a JSON reader and writer <span class="keyword">in</span> C++. JSON (JavaScr...</span><br><span class="line">jsonnet              0.16.0<span class="comment">#1         Jsonnet - The data templating language</span></span><br><span class="line">jwt-cpp              0.4.0            A header only library <span class="keyword">for</span> creating and validating json web tokens <span class="keyword">in</span> c++</span><br><span class="line">minitrace            2019.02.06       Simple C/C++ library <span class="keyword">for</span> producing JSON traces suitable <span class="keyword">for</span> Chrome<span class="string">&#x27;s built-in ...</span></span><br><span class="line"><span class="string">msgpack              3.3.0            MessagePack is an efficient binary serialization format, which lets you exchan...</span></span><br><span class="line"><span class="string">msgpack11            0.0.10-1         msgpack11 is a tiny MsgPack library for C++11, providing MsgPack parsing and s...</span></span><br><span class="line"><span class="string">nlohmann-json        3.9.1            JSON for Modern C++</span></span><br><span class="line"><span class="string">parson               2020-09-14       a lighweight json library written in C</span></span><br><span class="line"><span class="string">picojson             1.3.0-1          A header-file-only, JSON parser serializer in C++.</span></span><br><span class="line"><span class="string">rapidjson            2020-09-14       A fast JSON parser/generator for C++ with both SAX/DOM style API &lt;http://rapid...</span></span><br><span class="line"><span class="string">sajson               2018-09-21       Lightweight, extremely high-performance JSON parser for C++11</span></span><br><span class="line"><span class="string">simdjson             0.7.1            A extremely fast JSON library that can parse gigabytes of JSON per second</span></span><br><span class="line"><span class="string">sqlcipher[json1]                      enable JSON functionality for sqlite3</span></span><br><span class="line"><span class="string">sqlite3[json1]                        enable JSON functionality for sqlite3</span></span><br><span class="line"><span class="string">taocpp-json          2020-09-14       C++ header-only JSON library</span></span><br><span class="line"><span class="string">valijson             2018-11-17-1     Header-only C++ library for JSON Schema validation</span></span><br><span class="line"><span class="string">yajl                 2.1.0-1          Yet Another JSON Library</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If your library is not listed, please open an issue at and/or consider making a pull request:</span></span><br><span class="line"><span class="string">    https://github.com/Microsoft/vcpkg/issues</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>已安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg(master) » .&#x2F;vcpkg list</span><br><span class="line">sqlite3:x86-windows         3.32.1           SQLite is a software library that implements a se...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++、包管理</tag>
      </tags>
  </entry>
  <entry>
    <title>read-committed下GAP锁问题</title>
    <url>/2021/04/16/read-committed%E4%B8%8BGAP%E9%94%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>[TOC]</p>
<p>最近在定位一个数据库偶尔出现死锁的问题， 现象就是数据库在read-committed隔离级别下出现GAP锁，导致部分insert语句发生死锁、业务侧超时。<br>在这里记录下排查过程和结论，同时讨论以下几个问题<br>数据库各隔离级别及GAP锁的定义<br>GAP锁为什么会出现在read-committed隔离级别下<br>从哪些角度能避免死锁问题（在当前场景下）</p>
<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>先讲一下背景，业务中对数据库的操作分为读、更新、插入三类， 其中因为对数据库更新某个key的特定field的value时，因为无法判断该值是否已经写入到数据库中了， 所以需要使用on duplicate key 语句。<br>如果想避免该语句的话，也有几种方案可以实现此功能， 这个在后面的部分来讨论，大致来说就是将一条 on duplicate key 拆分为update 和 insert，需要的时候再使用 insert。<br>执行语句<br>业务中所有的数据库插入语句都是这种格式，执行语句中具体拼接的数量可以动态配置，默认情况下同key的不同field才会进行合并，大概5-10个field合并为一个执行语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (<span class="string">`key`</span>,<span class="string">`originalKey`</span>,<span class="string">`field`</span>,<span class="string">`value`</span>)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(),</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="string">`value`</span> = <span class="keyword">VALUES</span>(<span class="keyword">value</span>), <span class="string">`expire`</span>= <span class="keyword">VALUES</span>(<span class="keyword">expire</span>), <span class="string">`modifyTime`</span> = <span class="keyword">NOW</span>()</span><br></pre></td></tr></table></figure>
<h4 id="为什么不用replace？"><a href="#为什么不用replace？" class="headerlink" title="为什么不用replace？"></a>为什么不用replace？</h4><p>on duplicate key 与  replace的性能差异(有时间了再补充相关文档)<br>replace在检测的key冲突是执行的具体语句为 delete + insert，该操作将额外进行两次索引操作。<br>建表语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`profile_storage`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`storage_cluster`</span> (</span><br><span class="line"> <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`key`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;存储key&#x27;</span>,</span><br><span class="line"> <span class="string">`originalKey`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;原始key&#x27;</span>,</span><br><span class="line"> <span class="string">`field`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;存储列名&#x27;</span>,</span><br><span class="line"> <span class="string">`value`</span> <span class="built_in">blob</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;value, json&#x27;</span>,</span><br><span class="line"> <span class="string">`expire`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;写入时的有效时间，清理结合modifyTime+expire即可&#x27;</span>,</span><br><span class="line"> <span class="string">`modifyTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line"> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`key_field`</span> (<span class="string">`key`</span>,<span class="string">`field`</span>),</span><br><span class="line"> <span class="keyword">KEY</span> <span class="string">`modify_time`</span> (<span class="string">`modifyTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;画像数据存储&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>隔离级别</p>
<blockquote>
<p>tx_isolation = READ-COMMITTED</p>
</blockquote>
<h3 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h3><p>使用腾讯云DBbrain<br>我们使用的腾讯云的MySQL，腾讯云提供的数据库智能管家DBbrain可以很方便的查看当前和历史时刻的数据库状态。刚好这两天发生了一次deadlock，通过这个截图可以看下DBbrain的总览。<br><img src="/2021/04/16/read-committed%E4%B8%8BGAP%E9%94%81%E9%97%AE%E9%A2%98/dead_lock.png"></p>
<p>当点击死锁字段时会自动跳转到错误日志界面（包含事件详情和死锁快照）， 下面是死锁快照部分的具体日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">------------------------</span><br><span class="line">2021-04-18 11:18:47 0x7ff915060700</span><br><span class="line">*** (1) TRANSACTION:</span><br><span class="line">TRANSACTION 101037787573, ACTIVE 0 sec inserting</span><br><span class="line">mysql tables <span class="keyword">in</span> use 1, locked 1</span><br><span class="line">LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s), undo <span class="built_in">log</span> entries 2</span><br><span class="line">MySQL thread id 3527624187, OS thread handle 140694797604608, query id 72846449145 10.0.129.132 smonline update</span><br><span class="line">INSERT INTO `storage_cluster` ( `id`,`key`,`originalKey`,`field`,`value`,`expire` ) VALUES ( <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;15de83fc9a9f9834d8f4d7bfa9ff4713&#x27;</span>, <span class="string">&#x27;profile:smid:2020091521544905a3711528ba4a2e159d6f2230360a5001b6047b1f8904e4&#x27;</span>, <span class="string">&#x27;b_device_manufacturer&#x27;</span>, <span class="string">&#x27;\&quot;xiaomi\&quot;&#x27;</span>, 15552000 ) , ( <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;15de83fc9a9f9834d8f4d7bfa9ff4713&#x27;</span>, <span class="string">&#x27;profile:smid:2020091521544905a3711528ba4a2e159d6f2230360a5001b6047b1f8904e4&#x27;</span>, <span class="string">&#x27;device_score&#x27;</span>, <span class="string">&#x27;199&#x27;</span>, 15552000 ) , ( <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;15de83fc9a9f9834d8f4d7bfa9ff4713&#x27;</span>, <span class="string">&#x27;profile:smid:2020091521544905a3711528ba4a2e159d6f2230360a5001b6047b1f8904e4&#x27;</span>, <span class="string">&#x27;last_active_time&#x27;</span>, <span class="string">&#x27;1618715927103&#x27;</span>, 15552000 ) ON DUPLICATE KEY UPDATE `value` = VALUES(value), `expire`= VALUES(expire), `modifyTime` = NOW()</span><br><span class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 43 page no 27774151 n bits 328 index key_field of table `profile_storage`.`storage_cluster` trx id 101037787573 lock_mode X waiting</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class="line"> 0: len 30; hex 313564653833666339613966393833346438663464376266613966663437; asc 15de83fc9a9f9834d8f4d7bfa9ff47; (total 32 bytes);</span><br><span class="line"> 1: len 12; hex 6465766963655f73636f7265; asc device_score;;</span><br><span class="line"> 2: len 8; hex 8000000e95317813; asc 1x ;;</span><br><span class="line"></span><br><span class="line">*** (2) TRANSACTION:</span><br><span class="line">TRANSACTION 101037787572, ACTIVE 0 sec inserting</span><br><span class="line">mysql tables <span class="keyword">in</span> use 1, locked 1</span><br><span class="line">4 lock struct(s), heap size 1136, 3 row lock(s), undo <span class="built_in">log</span> entries 1</span><br><span class="line">MySQL thread id 3527607500, OS thread handle 140707776300800, query id 72846449143 10.0.129.31 smonline update</span><br><span class="line">INSERT INTO `storage_cluster` ( `id`,`key`,`originalKey`,`field`,`value`,`expire` ) VALUES ( <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;15de83fc9a9f9834d8f4d7bfa9ff4713&#x27;</span>, <span class="string">&#x27;profile:smid:2020091521544905a3711528ba4a2e159d6f2230360a5001b6047b1f8904e4&#x27;</span>, <span class="string">&#x27;bssid&#x27;</span>, <span class="string">&#x27;\&quot;020000000000\&quot;&#x27;</span>, 172800 ) ON DUPLICATE KEY UPDATE `value` = VALUES(value), `expire`= VALUES(expire), `modifyTime` = NOW()</span><br><span class="line">*** (2) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id 43 page no 27774151 n bits 328 index key_field of table `profile_storage`.`storage_cluster` trx id 101037787572 lock_mode X</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class="line"> 0: len 30; hex 313564653833666339613966393833346438663464376266613966663437; asc 15de83fc9a9f9834d8f4d7bfa9ff47; (total 32 bytes);</span><br><span class="line"> 1: len 12; hex 6465766963655f73636f7265; asc device_score;;</span><br><span class="line"> 2: len 8; hex 8000000e95317813; asc 1x ;;</span><br><span class="line"></span><br><span class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 43 page no 27774151 n bits 328 index key_field of table `profile_storage`.`storage_cluster` trx id 101037787572 lock_mode X locks gap before rec insert intention waiting</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class="line"> 0: len 30; hex 313564653833666339613966393833346438663464376266613966663437; asc 15de83fc9a9f9834d8f4d7bfa9ff47; (total 32 bytes);</span><br><span class="line"> 1: len 12; hex 6465766963655f73636f7265; asc device_score;;</span><br><span class="line"> 2: len 8; hex 8000000e95317813; asc 1x ;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (1)</span><br></pre></td></tr></table></figure>
<p>使用MySQL日志<br>这部分内容同样可以通过MySQL本身的错误日志查看MySQL - The Error Log）</p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>通过日志描述可以清楚定位发生死锁的两条语句和死锁详情</p>
<h4 id="为什么出现并发？"><a href="#为什么出现并发？" class="headerlink" title="为什么出现并发？"></a>为什么出现并发？</h4><p>业务中该数据库实例仅由画像引擎使用，画像引擎向上层的业务模块提供实体标签的查询和记录。 由于上层不同模块同时对同一个实体进行写操作，导致画像引擎部分发生 同  UNIQUE KEY的并发INSERT 操作</p>
<h4 id="出现的是什么锁？"><a href="#出现的是什么锁？" class="headerlink" title="出现的是什么锁？"></a>出现的是什么锁？</h4><p>死锁快照的最后一部分有这样一段描述</p>
<blockquote>
<p>trx id 101037787572 lock_mode X locks gap before rec insert intention waiting<br>引用1 中有对该错误出现原因的详细分析，文档中有对该错误的定义Insert Intention Locks<br>An insert intention lock is a type of gap lock set by INSERT operations prior to row insertion</p>
</blockquote>
<p>可以看到Insert Intention Locks属于Gap锁的一种，但是MySQL官方文档中对gap-locks定义innodb-gap-locks中有说明RC级别可以禁用Gap锁，那为什么还会出现这个问题呢。</p>
<blockquote>
<p>Gap locking can be disabled explicitly. This occurs if you change the transaction isolation level to READ COMMITTED. Under these circumstances, gap locking is disabled for searches and index scans and is used only for foreign-key constraint checking and duplicate-key checking.</p>
</blockquote>
<h3 id="为什么会现Gap锁"><a href="#为什么会现Gap锁" class="headerlink" title="为什么会现Gap锁"></a>为什么会现Gap锁</h3><blockquote>
<p>lock_mode X locks gap before rec insert intention waiting</p>
</blockquote>
<p>假设一个存在如下这样一个数据前提（具体信息可以在引用1中查看），当我们执行事务1按照order_type=2条件更新，因此先使用索引idx_order_type定位到order_type=2的记录并加锁(ROW LOCK)，再根据二级索引上包含的主键索引值找到表上order_id=2和order_id=4的记录并加锁(ROW LOCK)，加锁如下：<br><img src="/2021/04/16/read-committed%E4%B8%8BGAP%E9%94%81%E9%97%AE%E9%A2%98/idx_order_type.png"></p>
<ul>
<li>当我们同时执行事务2按照order_id=3条件更新，先根据主键定位到order_id=3并加锁(ROW LOCK)，然后根据主键中数据(order_type=1+ order_id=3)到索引idx_order_type上找到满足条件的记录并加锁，UPDATE操作将数据(1,3)更新为(2,3)，因此会将索引idx_order_type上记录(1,3)标记为删除，然后在记录(2,2)和(2,4)之间插入新记录(2,3),在插入记录前，为防止其他事务在该物理位置上插入其他数据，需要先在索引idx_order_type上申请记录(2,2)和(2,4)之间插入意向锁(Insert Intention Gap Lock),其加锁如下：<br><img src="/2021/04/16/read-committed%E4%B8%8BGAP%E9%94%81%E9%97%AE%E9%A2%98/idx_order_type_insert.png"></li>
<li>而由于索引记录(2,4)上已被事务1加锁（X LOCK+ ROW LOCK）,因此导致加插入意向锁(Insert Intention Gap Lock)被阻塞，处于“lock_mode X locks gap before rec insert intention waiting”的等待状态。<h4 id="RR及以上隔离级别为什么会出现-加锁策略"><a href="#RR及以上隔离级别为什么会出现-加锁策略" class="headerlink" title="RR及以上隔离级别为什么会出现 - 加锁策略"></a>RR及以上隔离级别为什么会出现 - 加锁策略</h4>对于这个错误的具体定义是：在事务插入数据过程中，为防止其他事务向索引上该位置插入数据，会在插入之前先申请插入意向范围锁，而如果申请插入意向范围锁被阻塞，则事务处于gap before rec insert intention waiting的等待状态。这篇文章中很形象的介绍了MySQL中的各类锁：说说你是怎么解决MySQL死锁的<br>我们先看下 官方定义中insert 语句的加锁策略：<blockquote>
<p>“INSERT sets an exclusive lock on the inserted row. This lock is an index-record lock, not a next-key lock (that is, there is no gap lock) and does not prevent other sessions from inserting into the gap before the inserted row.<br>Prior to inserting the row, a type of gap lock called an insert intention gap lock is set. This lock signals the intent to insert in such a way that multiple transactions inserting into the same index gap need not wait for each other if they are not inserting at the same position within the gap. ”</p>
</blockquote>
</li>
</ul>
<p>我们知道事务执行insert的时候会申请一把插入意向锁(Insert Intention Lock)。在多个会话并发写入不同数据记录至同一索引间隙的时候，并不需要等待其他事务完成，不会发生锁等待。<br>假设有一个索引记录包含键值4和7，不同的会话分别插入5和6，每个事务都会产生一个加在4-7之间的插入意向锁，获取在插入行上的排它锁，但是不会被互相锁住，因为数据行并不冲突。<br>当前情况为什么会出现 - 补充说明<br>但是如果遇到唯一键呢？<br>( Under these circumstances指的就是 transaction isolation level READ COMMITTED) </p>
<blockquote>
<p>Under these circumstances, gap locking is disabled for searches and index scans and is used only for foreign-key constraint checking and duplicate-key checking.<br>同时insert加锁策略中也有描述<br>If a duplicate-key error occurs, a shared lock on the duplicate index record is set. This use of a shared lock can result in deadlock should there be multiple sessions trying to insert the same row if another session already has an exclusive lock.<br>对于insert操作来说，若发生唯一约束冲突，则需要对冲突的唯一索引加上S Next-key Lock。从这里会发现，即使是RC事务隔离级别，也同样会存在Next-Key Lock锁，从而阻塞并发。然而，文档没有说明的是，对于检测到冲突的唯一索引，等待线程在获得S Lock之后，还需要对下一个记录进行加锁，在源码中由函数row_ins_scan_sec_index_for_duplicate进行判断。<br>普通索引和唯一索引的区别<br>为什么在RC级别下Gap会与唯一索引有关呢？ 唯一索引有普通索引有什么区别？ 能否通过将唯一索引替换为普通索引来解决此问题？<br>// TODO </p>
</blockquote>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>虽然Gap锁只作用在隔离级别为RR及以上的数据库上， 但是不意味着隔离级别为RC 级别的不会使用。 RC级别在进行外键约束检测和唯一键约束检测的时候，会使用到Gap锁， 而正是这个 duplicate-key checking 导致了上文出现的死锁发生。</p>
<h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><p>拆分执行语句 - 减小合并记录数量<br>拆分执行语句 - update + insert<br>同类问题和相关文档<br>这里记录一下排查问题过程中浏览到的一些文档，其实官方文档永远是做好的参考手册，笔记中的引用也尽量去找对应的官方说明了，但是在没有找到用好官方文档的技巧之前，大佬翻译和图解过的内容看起来会简单一些。</p>
<h3 id="同类问题及相关文档"><a href="#同类问题及相关文档" class="headerlink" title="同类问题及相关文档"></a>同类问题及相关文档</h3><ol>
<li><a href="https://www.cnblogs.com/gaogao67/p/11042853.html">MySQL Lock–gap before rec insert intention waiting</a></li>
<li><a href="https://www.cnblogs.com/crazylqy/p/7689447.html">初步理解MySQL的gap锁</a></li>
<li><a href="https://www.cnblogs.com/LBSer/p/5183300.html">mysql死锁问题分析</a></li>
<li><a href="https://www.cnblogs.com/zhjh256/p/6051839.html">mysql 5.6 read-committed隔离级别下并发插入唯一索引导致死锁一例（GAP锁的问题）</a></li>
<li><a href="http://www.kokojia.com/article/42839.html">数据库：MySQL 普通索引和唯一索引的区别</a></li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>GAP Deadlock</tag>
      </tags>
  </entry>
  <entry>
    <title>C++异常分类与处理</title>
    <url>/2025/04/17/C-%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB%E4%B8%8E%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="异常检测-amp-异常处理的介绍"><a href="#异常检测-amp-异常处理的介绍" class="headerlink" title="异常检测&amp;异常处理的介绍"></a>异常检测&amp;异常处理的介绍</h2><p><span style="color: red;">异常提供了一种转移程序控制权的方式</span><br>异常是指在程序运行时发生的反常行为，这些行为超出了函数正常功能的范围。<br>典型的异常包括失去数据库连接以及遇到意外输入等，当程序的某部分检测到一个它无法处理的问题时，需要用到异常处理。<br>此时，检测出问题的部分应该发出某种信号以表明程序遇到了故障，无法继续下去了，而且信号的发出方无须知道故障将在何处得到解决。<br>一旦发出异常信号，检测出问题的部分也就完成了任务。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理机制为程序中“异常检测”和“异常处理”这两部分的协作提供支持<br>C++异常处理涉及到三个关键字：try、catch、throw，在C++语言中，异常处理包括：</p>
<ul>
<li>throw表达式(throw expression)：<ul>
<li>异常检测部分使用throw表达式来表示它遇到了无法处理的问题。throw引发(raise)异常。</li>
<li>throw表达式包含关键字throw和紧随其后的一个表达式，其中表达式的类型就是抛出的异常类型。</li>
<li>throw表达式后面通常紧跟一个分号，从而构成一条表达式语句。</li>
<li><span style="color: red;">抛出异常将终止当前的函数，并把控制权转移给能处理该异常的代码</span></li>
</ul>
</li>
<li>try语句块(try block)：<ul>
<li>异常处理部分使用try语句块处理异常</li>
<li>try语句块以关键字try开始，并以一个或多个catch子句(catch clause)结束</li>
<li>try语句块中代码抛出的异常通常会被某个catch子句处理</li>
<li>因为catch子句处理异常，所以它们也被称作异常处理代码(exception handler)，catch子句包括三部分：<ul>
<li>关键字catch、括号内一个(可能未命名的)对象的声明(称作异常声明，exception declaration)以及一个块</li>
<li>当选中了某个catch子句处理异常之后，执行与之对应的块</li>
<li>catch一旦完成，程序跳转到try语句块最后一个catch子句之后的那条语句继续执行</li>
</ul>
</li>
<li><span style="color: red;">一如往常，try语句块声明的变量在块外部无法访问，特别是在catch子句内也无法访问</span></li>
<li><span style="color: red;">如果一段程序没有try语句块且发生了异常，系统会调用terminate函数并终止当前程序的执行</span></li>
</ul>
</li>
<li>一套异常类(exception class)：用于在throw表达式和相关的catch子句之间传递异常的具体信息</li>
</ul>
<h4 id="函数在寻找处理代码的过程中退出"><a href="#函数在寻找处理代码的过程中退出" class="headerlink" title="函数在寻找处理代码的过程中退出"></a>函数在寻找处理代码的过程中退出</h4><p>寻找处理代码的过程与函数调用链刚好相反。<br>当异常被抛出时，首先搜索抛出该异常的函数。如果没有找到匹配的catch子句，终止该函数，并在调用该函数的函数中继续寻找。<br>如果还是没有找到匹配的catch子句，这个新的函数也被终止，继续搜索调用它的函数。以此类推，沿着程序的执行路径逐层回退，直到找到适当类型的catch子句为止。<br><img src="/2025/04/17/C-%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB%E4%B8%8E%E5%A4%84%E7%90%86/throw.png"></p>
<p>如果最终还是没能找到任何匹配的catch子句，程序转到名为terminate的标准库函数。该函数的行为与系统有关，一般情况下，执行该函数将导致程序非正常退出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="comment">/** The runtime will call this function if %exception handling must be</span></span><br><span class="line"><span class="comment"> *  abandoned for any reason.  It can also be called by the user.  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">terminate</span><span class="params">()</span> _GLIBCXX_USE_NOEXCEPT __<span class="title">attribute__</span> <span class="params">((__noreturn__))</span></span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol>
<li><p>terminate函数<br>C++中，异常不可以忽略，当异常找不到匹配的catch字句时，会调用系统的库函数terminate()（在头文件中），默认情况下，terminate（）函数调用标准C库函数abort（）使程序终止而退出。当调用abort函数时，程序不会调用正常的终止函数，也就是说，全局对象和静态对象的析构函数不会执行。</p>
</li>
<li><p>set_terminate()函数<br>通过使用标准的set_terminate()函数，可以设置自己的terminate（)函数。自定义的terminate()函数不能有参数，而且返回值类型为void。另外，terminate函数不能返回也不能抛出异常，它必须终止程序。如果terminate函数被调用，这就意味着问题已经无法解决了。</p>
</li>
</ol>
<p>那些在异常发生期间正确执行了”清理”工作的程序被称作异常安全(exception safe)的代码。编写异常安全的代码非常困难。<br><span style="color:red;">任何执行try 或者catch中的return语句之后，在返回之前，如果finally存在的话，都会先执行finally语句，如果finally中有return语句，那么程序就return了，所以finally中的return是一定会被return的，编译器把finally中的return实现为一个warning。</span></p>
<h2 id="异常的分类和定义"><a href="#异常的分类和定义" class="headerlink" title="异常的分类和定义"></a>异常的分类和定义</h2><h3 id="异常的基类与子类"><a href="#异常的基类与子类" class="headerlink" title="异常的基类与子类"></a>异常的基类与子类</h3><p><img src="/2025/04/17/C-%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB%E4%B8%8E%E5%A4%84%E7%90%86/exception_base.png"><br>std::exception是标准c++里所有的异常类的基类，你可以通过继承这个类来实现你自己的异常类<br>可以看到标准c++提供了很多异常类，用于捕获使用标准c++类发生的错误，同时每个类里重写了std::exception虚函数what，用于打印发生的错误信息</p>
<h4 id="异常类对应的使用场景"><a href="#异常类对应的使用场景" class="headerlink" title="异常类对应的使用场景"></a>异常类对应的使用场景</h4><p>下面是继承基类提供的错误类描述</p>
<ul>
<li>std::bad_alloc<br>  当程序调用new分配内存时，内存不够时会抛出此异常</li>
<li>std::bad_cast<br>  类型转换失败时抛出的异常，由dynamic_cast(将基类指针转为继承类指针类型)抛出</li>
<li>std::bad_typeid<br>  当获取类型失败时会抛出此异常</li>
<li>std::bad_exception<br>  一些未知的异常，可以通过此类抛出来</li>
<li>std::logic_error<br>  逻辑错误类，可以通过继承此类来抛出一些逻辑的错误，用于自定义逻辑错误，当然也可以不继承它，这只是c++提供的标准，以下是c++继承std::logic_error实现的几个异常类<ul>
<li>std::domain_error<br>  自定义异常类型,用户可以通过抛出此异常来描述自己的自定义异常，抛出的类型只能是const char*,主要用于标识告诉调用者在主或核心函数里发生了异常，这是c++帮我们定义的异常类型</li>
<li>std::invalid_argument<br>  无效参数类型，如果检测到无效参数，可以通过此异常抛出去</li>
<li>std::length_error<br>  当长度超出规定值时可以通过此异常抛出</li>
<li>std::out_of_range<br>  发生越界时可以通过此异常类型抛出</li>
</ul>
</li>
<li>std:runtime_error<br>  运行时的异常类型，当运行时发生了异常，可以通过继承此类来抛出异常，以下是c++继承此类实现的几个标准类<ul>
<li>std::overflow_error<br>  当运行时进行数学计算时，输入的数据太长，超出了缓冲区，并填充到缓冲区上一级的内存空间里去时会抛出此异常</li>
<li>std::underflow_error<br>  当运行时进行数学计算时，输入的数据太长，超出了缓冲区，并填充到缓冲区下一级的内存空间里去时会抛出此异常</li>
<li>std::range_error<br>  计算时所产生的结果不符合预期值，或预期范围值时会抛出此异常</li>
</ul>
</li>
</ul>
<p>《C++Primer(Fifth Edition)》<br>异常类所在的头文件<br>它们分别定义在4个头文件中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="comment">// 定义了最通常的异常类std::exception，它只报告异常的发生，不提供任何额外的信息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="comment">// 定义了几种常用的异常类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new&gt;</span></span></span><br><span class="line"><span class="comment">// 定义了bad_alloc异常类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="comment">// 定义了bad_cast异常类型</span></span><br></pre></td></tr></table></figure>
<p>以上这些标准被很多数学库和其它的一些类库所采用，我们调用时可以根据函数行为来捕获对应的异常。<br>一个合格的c++程序员，理应在对应的场景下使用这些异常类，以符合通用标准。</p>
<h2 id="如何使用异常类"><a href="#如何使用异常类" class="headerlink" title="如何使用异常类"></a>如何使用异常类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">division</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::invalid_argument(<span class="string">&quot;Division by zero condition&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (a / b);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        z = division(x, y);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="built_in">std</span>::exception &amp;e) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="规范中怎么要求异常处理"><a href="#规范中怎么要求异常处理" class="headerlink" title="规范中怎么要求异常处理"></a>规范中怎么要求异常处理</h3><p>异常通常发生在非预期的执行情况下，此时为了保证请求/模块的“可监控”标准，需要在使用异常捕获时遵守如下规范：<br><a href="https://google.github.io/styleguide/cppguide.html#Exceptions">Google C++ Style Guide#异常</a></p>
<h2 id="重写自己的异常类"><a href="#重写自己的异常类" class="headerlink" title="重写自己的异常类"></a>重写自己的异常类</h2><h3 id="何时重写自己的异常类"><a href="#何时重写自己的异常类" class="headerlink" title="何时重写自己的异常类"></a>何时重写自己的异常类</h3><ol>
<li>发生非预期内容/需要转移程序控制权</li>
<li>需要区分异常类型进行区别处理<br>应该怎么做<ol>
<li>见不应该怎么做<br>不应该怎么做</li>
</ol>
</li>
<li>避免使用std::exception捕获所有异常，然后通过what内容进行异常分类<ol>
<li>避免使用std::exception捕获所有异常，不区分处理逻辑<br><img src="/2025/04/17/C-%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB%E4%B8%8E%E5%A4%84%E7%90%86/catch_next.png"></li>
</ol>
</li>
</ol>
<h3 id="如何重写自己的异常类"><a href="#如何重写自己的异常类" class="headerlink" title="如何重写自己的异常类"></a>如何重写自己的异常类</h3><p><strong>std::exception：标准异常类的基类，其类的声明在头文件<exception>中。所有标准库的异常类均继承于此类，因此通过引用类型可以捕获所有标准异常。</exception></strong><br>std::exception类定义了无参构造函数、拷贝构造函数、拷贝赋值运算符、一个虚析构函数和一个名为what的无参虚成员。<br>其中what函数返回一个const char*，该指针指向一个以null结尾的字符数组，并且确保不会抛出任何异常，该字符串的目的是提供关于异常的一些文本信息。<br><strong>除析构函数外，其它函数均通过关键字noexcept说明此函数不会抛出异常。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">exception</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    exception() _GLIBCXX_NOTHROW &#123; &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">    exception(<span class="keyword">const</span> exception&amp;) = <span class="keyword">default</span>;</span><br><span class="line">    exception&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> exception&amp;) = <span class="keyword">default</span>;</span><br><span class="line">    exception(exception&amp;&amp;) = <span class="keyword">default</span>;</span><br><span class="line">    exception&amp; <span class="keyword">operator</span>=(exception&amp;&amp;) = <span class="keyword">default</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns a C-style character string describing the general cause</span></span><br><span class="line"><span class="comment">     *  of the current error.  */</span></span><br><span class="line">    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>*</span><br><span class="line">    what() <span class="keyword">const</span> _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;</span><br><span class="line">  &#125;;</span><br><span class="line">...</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> _GLIBCXX_USE_NOEXCEPT noexcept</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GLIBCXX_NOTHROW</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>std::exception is the class whose only purpose is to serve as the base class in the exception hierarchy. It has no other uses. In other words, conceptually it is an abstract class (even though it is not defined as abstract class in C++ meaning of the term).<br>以下内容摘自：《C++Primer(Fifth Edition)》</p>
<h3 id="重写并捕获自定义异常"><a href="#重写并捕获自定义异常" class="headerlink" title="重写并捕获自定义异常"></a>重写并捕获自定义异常</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myexception</span> :</span> <span class="keyword">public</span> <span class="built_in">std</span>::exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">what</span><span class="params">()</span> <span class="keyword">const</span> <span class="title">throw</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;My exception happened&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; myex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_exception2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> myex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="built_in">std</span>::exception&amp; e) &#123; <span class="comment">// catches exception objects by reference (notice the ampersand &amp; after the type)</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常捕获的其他讨论"><a href="#异常捕获的其他讨论" class="headerlink" title="异常捕获的其他讨论"></a>异常捕获的其他讨论</h2><p>try catch能捕获哪些异常<br>    见不能捕获哪些异常<br>不能捕获的异常有什么<br>先做假定：<span style="color:red;">try catch仅能用于捕获程序主动throw的异常（包括std::exception类及其子类、包括int、char等类型）</span></p>
<p>无法捕获以下常见的非主动throw内容</p>
<ul>
<li>常见的空指针、计算溢出、异常转化、零值计算等等</li>
<li>常见的程序退出信号<br>对于一些程序abort信号，虽然有方式进行捕获，但是不可以在运行程序中执行退出信号的捕获操作。<br>当退出信号发出后，一般表示程序已进入最后阶段，再执行抢救，可能会发生其他非预期问题。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_exception_not_catch_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span>* index = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">100</span>/(*index);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">std</span>::exception &amp;e) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Exception: &quot;</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试捕获并做最终执行的异常</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_signal_handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::signal(SIGSEGV, [](<span class="keyword">int</span> signal) &#123;</span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;got a SIGSEGV signal, start exit&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    register_signal_handle();</span><br><span class="line">    test_exception_not_catch_1();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;process final&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://cplusplus.com/doc/tutorial/exceptions/">https://cplusplus.com/doc/tutorial/exceptions/</a></li>
<li><a href="https://blog.csdn.net/bjbz_cxy/article/details/110231205">https://blog.csdn.net/bjbz_cxy/article/details/110231205</a></li>
<li><a href="https://blog.csdn.net/fengbingchun/article/details/78303734/">https://blog.csdn.net/fengbingchun/article/details/78303734/</a></li>
<li><a href="https://blog.csdn.net/fengbingchun/article/details/65939258">https://blog.csdn.net/fengbingchun/article/details/65939258</a></li>
<li><a href="https://blog.csdn.net/weixin_40332490/article/details/105265475">https://blog.csdn.net/weixin_40332490/article/details/105265475</a></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>ThriftRPC框架-请求优先级实现原理</title>
    <url>/2025/04/17/ThriftRPC%E6%A1%86%E6%9E%B6-%E8%AF%B7%E6%B1%82%E4%BC%98%E5%85%88%E7%BA%A7%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
  </entry>
  <entry>
    <title>推荐架构的工程拆解</title>
    <url>/2025/04/17/%E6%8E%A8%E8%8D%90%E6%9E%B6%E6%9E%84%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%8B%86%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
  </entry>
  <entry>
    <title>重叠实验架构基础设施</title>
    <url>/2025/04/17/%E9%87%8D%E5%8F%A0%E5%AE%9E%E9%AA%8C%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
  </entry>
  <entry>
    <title>从数美科技的风控架构出发，如何理解DDD思想</title>
    <url>/2025/04/18/%E4%BB%8E%E6%95%B0%E7%BE%8E%E7%A7%91%E6%8A%80%E7%9A%84%E9%A3%8E%E6%8E%A7%E6%9E%B6%E6%9E%84%E5%87%BA%E5%8F%91%EF%BC%8C%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3DDD%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<p>[TOC]</p>
<blockquote>
<p>第一次知道 DDD， 是在 2021 年迫切想提升自己架构设计能力时，看到了一篇 2017 年美团技术团队发布的文章:<a href="https://tech.meituan.com/2017/12/22/ddd-in-practice.html">领域驱动设计在互联网业务开发中的实践</a>，时光转瞬，四年后的今天我对 DDD 的理解还是懵懵懂懂…</p>
</blockquote>
<h2 id="现状以及面临的问题"><a href="#现状以及面临的问题" class="headerlink" title="现状以及面临的问题"></a>现状以及面临的问题</h2><p>业务：互联网业务风控、AIGC 内容风控<br>功能：支持文本、图片、视频文件、视频流、音频文件、音频流、行为事件等多种形式的内容风控、行为风控</p>
<h3 id="经典的三层架构"><a href="#经典的三层架构" class="headerlink" title="经典的三层架构"></a>经典的三层架构</h3><p><img src="/2025/04/18/%E4%BB%8E%E6%95%B0%E7%BE%8E%E7%A7%91%E6%8A%80%E7%9A%84%E9%A3%8E%E6%8E%A7%E6%9E%B6%E6%9E%84%E5%87%BA%E5%8F%91%EF%BC%8C%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3DDD%E6%80%9D%E6%83%B3/classical_v1.png"><br>我们抽取两个模块，从实现功能角度来看一下存在哪些问题</p>
<table>
  <tr>
    <th>模块</th>
    <th>职责</th>
  </tr>
  <tr>
<td>图像处理模块（pi-image）</td>
<td>图片审核请求参数的校验<br>业务数据记录<br>图片获取<br>图像的截帧<br><span style="color: red;">截帧图像处理<br>基础设施层调用及结果整合</span></td>
</tr>
 <tr>
<td>视频文件处理模块（pi-vidoe）</td>
<td>视频文件审核参数的校验<br>业务数据记录<br>文件获取<br>视频截帧抽取<br>视频音频片段切分<br><span style="color: red;">截帧图像的处理<br>基础设施层调用及结果整合</span>
</td>
  </tr>
</table>
我们会发现，两个模块除了各自的媒体形式逻辑以外，都在做相同的截帧图像的处理、基础设施层调用及结果整合功能。并且这两个具体功能中包含大量的业务逻辑且会经常性的迭代变更。

<h3 id="怎么从质量和效率的角度论证呢"><a href="#怎么从质量和效率的角度论证呢" class="headerlink" title="怎么从质量和效率的角度论证呢"></a>怎么从质量和效率的角度论证呢</h3><h2 id="如何改进？"><a href="#如何改进？" class="headerlink" title="如何改进？"></a>如何改进？</h2><blockquote>
<p>为什么不抽象独立的视觉对象？</p>
<blockquote>
<p>该对象负责图片业务截帧、视频文件业务截帧、视频流业务截帧、网页业务截帧等所有视觉对象的审核功能。</p>
</blockquote>
</blockquote>
<h3 id="独立视觉对象的架构"><a href="#独立视觉对象的架构" class="headerlink" title="独立视觉对象的架构"></a>独立视觉对象的架构</h3><p>先说第一版尝试优化的结果：我们将多种互联网媒体形式下的三种基础内容进行抽象。每种基础内容对象的所有功能放到子域内，向上层提供简单的对象审核 API。</p>
<ul>
<li>视觉对象：视觉截帧（可以是图片、视频、网页等多种来源）</li>
<li>语义对象：文本片段（可以是文本、OCR、ASR 等多种来源）</li>
<li>语音对象：音频片段（可以是音频、视频音频等多种来源）<br><img src="/2025/04/18/%E4%BB%8E%E6%95%B0%E7%BE%8E%E7%A7%91%E6%8A%80%E7%9A%84%E9%A3%8E%E6%8E%A7%E6%9E%B6%E6%9E%84%E5%87%BA%E5%8F%91%EF%BC%8C%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3DDD%E6%80%9D%E6%83%B3/DDD_v2.png"><br>修改后从架构设计角度来看有哪些改变：</li>
<li>修改独立性：各对象独立修改、发布，可按照业务单元进行拆分</li>
<li>一处一事实：避免多处实现修改不一致等质量效率问题</li>
<li>概念多样性：支持领域对象独立扩展，支持语音对象、行为事件对象等</li>
</ul>
<h3 id="改进后与-DDD-的思想还有哪些差异？"><a href="#改进后与-DDD-的思想还有哪些差异？" class="headerlink" title="改进后与 DDD 的思想还有哪些差异？"></a>改进后与 DDD 的思想还有哪些差异？</h3>]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
  </entry>
  <entry>
    <title>arc42模版的实践思考</title>
    <url>/2025/04/18/arc42%E6%A8%A1%E7%89%88%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>依赖倒置原则<br>将模块间原来依赖于实现的部分， 修改未依赖接口</p>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
  </entry>
  <entry>
    <title>怎么理解DDD领域驱动设计</title>
    <url>/2025/04/20/%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3DDD%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>2004 年埃里克·埃文斯（Eric Evans）发表了《领域驱动设计》（Domain-Driven Design–Tackling Complexity in the Heart of Software）这本书，从此领域驱动设计（Domain Driven Design，简称 DDD）诞生。</p>
<blockquote>
<p><span style="color:red;">DDD 核心思想是通过领域驱动设计方法定义领域模型，从而确定业务和应用边界，保证业务模型与代码模型的一致性。</span></p>
</blockquote>
<p><strong>DDD是一种设计思想，通过事件风暴使用通用语言对业务进行领域建模，通过限界上下文进行合理的领域拆分，可以使得领域模型转向微服务的设计和落地，从而解决复杂软件难以理解，难以演进，也可以解决微服务业务界限难以界定的问题。</strong></p>
<h2 id="什么是领域驱动设计？"><a href="#什么是领域驱动设计？" class="headerlink" title="什么是领域驱动设计？"></a>什么是领域驱动设计？</h2><p>领域 -&gt; 设计<br>什么是领域：<strong>百科：具体指一种特定的范围或区域</strong><br>业务问题域：比如金融领域、医疗领域、电商领域</p>
<p>什么是驱动：（百科：用动力推动、带动、发动）<br>问题域驱动领域建模、领域模型驱动技术实现</p>
<p>什么是设计：（百科：设计就是设想、运筹、计划、预算的一个过程）<br>领域模型的设计，用领域模型表达现实世界、解决实际问题。</p>
<h2 id="有什么优缺点？"><a href="#有什么优缺点？" class="headerlink" title="有什么优缺点？"></a>有什么优缺点？</h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p><span style="color:red;">将数据不⼀致的影响⾯进⼀步放⼤，由微服务级别放⼤到微服务内的聚合级别。</span></p>
<ul>
<li>什么是数据不一致：</li>
<li>为什么会放大：</li>
</ul>
<h2 id="怎么使用-DDD"><a href="#怎么使用-DDD" class="headerlink" title="怎么使用 DDD"></a>怎么使用 DDD</h2><ol>
<li>简历统一语言</li>
<li>分解问题域</li>
<li>链接业务和系统</li>
</ol>
<h3 id="怎么理解战略设计、战术设计？"><a href="#怎么理解战略设计、战术设计？" class="headerlink" title="怎么理解战略设计、战术设计？"></a>怎么理解战略设计、战术设计？</h3><p>战略设计：通用语言、领域/子域、限界上下文和架构风格等概念</p>
<table>
  <tr>
    <th>动作</th>
    <th>核心目标</th>
    <th>关注点</th>
    <th>关键概念</th>
    <th>示例</th>
  </tr>
  <tr>
<td>战略设计</td>
<td>划分系统边界，明确业务领域的核心问题，并定义不同模块的交互关系</td>
<td>宏观的领域划分、协作关系和语言统一</td>
<td>
1. **领域（Domain）**：业务问题空间，如电商、金融等。<br>
2. **子域（SubDomain）**：将复杂领域分解为更小的部分，分为核心域（核心业务）、支撑域（辅助功能）、通用子域（通用解决方案，如支付）。<br>
3. **限界上下文（Bounded Context）**：模型的边界，每个上下文内使用一致的术语和规则（例如，“订单”在销售和物流上下文中含义不同）<br>
4. **上下文映射（Context Mapping）**：定义不同限界上下文之间的交互模式，如合作关系、客户-供应商、防腐层（Anti-Corruption Layer）等。<br>
5. **统一语言（Ubiquitous Language）**：业务与技术团队共享的术语，确保沟通一致性。<br>
</td>
<td>在电商系统重，战略设计会划分出“订单处理”（核心域）、“库存管理”（支撑域 ）、“用户认证”（通用子域）等限界上下文，并通过上下文映射定义他们如何协作（如订单处理通过防腐层调用库存服务）</td>
</tr>
<tr>
<td>战术设计</td>
<td>实现限界上下文内的领域模型，通过具体模式表达业务逻辑。</td>
<td>围观的代码结构和设计模式</td>
<td>
1. **实体（Entity）**：具有唯一标识和生命周期的对象（如 Order）。<br>
2. **值对象（Value Object）**：无唯一标识、通过属性定义的对象（如 Money）。<br>
3. **聚合（Aggregate）**：封装一组相关对象的根实体，保证业务一致性（如 Order 作为聚合根，包含 OrderItem）<br>
4. **领域服务（Domain Service）**：处理跨聚合或无状态操作的逻辑（如订单计价服务）。<br>
5. **仓储（Repository）**：提供聚合的持久化和查询接口 <br>
6. **领域事件（Domain EventId）**：标识业务状态变化的事件（如 OrderPlaceEvent）。<br>
7. **工厂（Factory）：封装复杂对象的创建逻辑<br>
</td>
<td>在“订单处理”上下文中，战术设计会定义 Order 实体、OrderItem 值对象、OrderRepository 仓储，并通过领域事件触发库存更新。</td>
</tr>
</table>




]]></content>
      <categories>
        <category>架构设计方法论</category>
      </categories>
  </entry>
  <entry>
    <title>效果实验平台中各类指标的理解</title>
    <url>/2025/04/20/%E6%95%88%E6%9E%9C%E5%AE%9E%E9%AA%8C%E5%B9%B3%E5%8F%B0%E4%B8%AD%E5%90%84%E7%B1%BB%E6%8C%87%E6%A0%87%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="先看适用场景"><a href="#先看适用场景" class="headerlink" title="先看适用场景"></a>先看适用场景</h2><h3 id="关键对比与选择建议"><a href="#关键对比与选择建议" class="headerlink" title="关键对比与选择建议"></a>关键对比与选择建议</h3><table>
<thead>
<tr>
<th>指标</th>
<th>核心关注点</th>
<th>典型场景</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>准确率</td>
<td>整体预测正确性</td>
<td>类别均衡的初步评估</td>
<td>对不平衡数据不敏感</td>
</tr>
<tr>
<td>精准率</td>
<td>预测正类的可靠性</td>
<td>误报成本高（如法律判决）</td>
<td>可能漏掉大量实际正类</td>
</tr>
<tr>
<td>召回率</td>
<td>捕捉实际正类的能力</td>
<td>漏报成本高（如疾病筛查）</td>
<td>可能引入大量误报</td>
</tr>
</tbody></table>
<p><strong>权衡建议</strong></p>
<ul>
<li>精准率 vs 召回率：根据业务需求选择。例如，推荐系统可能优先精准率（推荐内容必须相关），而癌症筛查优先召回率（不能漏诊）。</li>
<li>综合指标：使用F1分数（精准率和召回率的调和平均）或PR曲线平衡两者。</li>
</ul>
<p><strong>进阶技巧</strong></p>
<ul>
<li>类别不平衡时，优先选择精准率、召回率或AUC-ROC；</li>
<li>多分类问题中，可采用宏平均（Macro）或加权平均（Weighted）扩展这些指标。</li>
</ul>
<h2 id="再看指标定义"><a href="#再看指标定义" class="headerlink" title="再看指标定义"></a>再看指标定义</h2><p>在介绍指标前必须先了解“混淆矩阵”：</p>
<h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><ul>
<li>True Positive(真正，TP)：将正类预测为正类数</li>
<li>True Negative(真负，TN)：将负类预测为负类数</li>
<li>False Positive(假正，FP)：将负类预测为正类数误报 (Type I error)</li>
<li>False Negative(假负，FN)：将正类预测为负类数→漏报 (Type II error)</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Positive</th>
<th>Negative</th>
</tr>
</thead>
<tbody><tr>
<td>True</td>
<td>True Positive(TP)</td>
<td>True Negative(TN)</td>
</tr>
<tr>
<td>False</td>
<td>False Positive(FP)</td>
<td>False Negative(FN)</td>
</tr>
</tbody></table>
<table>
<tr><th rowspan="5">实<br>际<br>类<br>别</th><th colspan="4" style="text-align:center">预测类别</th></tr>
<tr><td></td><td>Yes</td><td>No</td><td>总计</td></tr>
<tr><td>Yes</td><td>TP</td><td>FN</td><td>P(实际为 Yes)</td></tr>
<tr><td>No</td><td>FP</td><td>TN</td><td>N(实际为 No)</td></tr>
<tr><td>总计</td><td>P'（被分为 Yes）</td><td>N'（被分为 No）</td><td>P+N</td></tr>
 </table>

<h3 id="准确率（accuracy）"><a href="#准确率（accuracy）" class="headerlink" title="准确率（accuracy）"></a>准确率（accuracy）</h3><p>准确率（accuracy）计算公式为：</p>
<blockquote>
<p>ACC = （TP + TN）/ (TP + FP + TN + FN)</p>
<blockquote>
<p>简单来说，准确率 = 正确分类的样本数 / 样本总数</p>
</blockquote>
</blockquote>
<h4 id="为什么需要准确率："><a href="#为什么需要准确率：" class="headerlink" title="为什么需要准确率："></a>为什么需要准确率：</h4><p><strong>作用</strong>：衡量模型整体预测正确性，适用于类别均衡的场景。<br><strong>优点</strong>：</p>
<ul>
<li>直观易懂：直接反映模型整体正确率；</li>
<li>计算简单：适合快速评估模型性能。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>对类别不平衡敏感：当某一类样本占绝对多数时（如99%负样本），模型即使将所有样本预测为多数类，准确率也会虚高；</li>
<li>掩盖细节问题：无法区分模型在正负类上的具体表现差异。</li>
</ul>
<p><strong>适用场景</strong>：</p>
<ul>
<li>类别分布均衡（如男女分类）；</li>
<li>初步快速评估模型</li>
</ul>
<h3 id="精准率-Precision"><a href="#精准率-Precision" class="headerlink" title="精准率(Precision)"></a>精准率(Precision)</h3><blockquote>
<p>P = TP / (TP + FP)</p>
<blockquote>
<p>简单来说，精准率 = 正确分类的正例样本数 / 分类为正例的样本数</p>
</blockquote>
</blockquote>
<h4 id="为什么需要精准率："><a href="#为什么需要精准率：" class="headerlink" title="为什么需要精准率："></a>为什么需要精准率：</h4><p><strong>作用</strong>：衡量模型预测为正类的样本中实际为正类的比例，关注减少误报（False Positive）。<br><strong>优点</strong>：</p>
<ul>
<li>强调预测可靠性：适合对误报容忍度低的场景（如垃圾邮件分类）；</li>
<li>对负样本数量不敏感。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>忽略漏报问题：不关心实际正类中有多少被漏判（FN）；</li>
<li>可能牺牲召回率以提高精准率。</li>
</ul>
<p><strong>适用场景</strong>：</p>
<ul>
<li>误报成本高的任务（如法律判决、金融风控）；</li>
<li>需要确保“预测为正类的样本尽可能正确”的场景。</li>
</ul>
<h3 id="召回率（recall）"><a href="#召回率（recall）" class="headerlink" title="召回率（recall）"></a>召回率（recall）</h3><blockquote>
<p>recall=TP/(TP+FN)=TP/P=sensitive</p>
<blockquote>
<p>召回率是覆盖面的度量，度量有多个正例被分为正例，recall=TP/(TP+FN)=TP/P=sensitive，可以看到召回率与灵敏度是一样的。</p>
</blockquote>
</blockquote>
<h4 id="为什么需要召回率"><a href="#为什么需要召回率" class="headerlink" title="为什么需要召回率"></a>为什么需要召回率</h4><p><strong>作用</strong>：衡量实际为正类的样本中被正确预测的比例，关注减少漏报（False Negative）。<br><strong>优点</strong>：</p>
<ul>
<li>强调覆盖能力：适合必须尽可能捕捉所有正类的场景（如疾病诊断）；</li>
<li>对正样本数量不敏感。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>可能增加误报：为提高召回率可能将更多样本预测为正类；</li>
<li>可能牺牲精准率以提高召回率。</li>
</ul>
<p><strong>适用场景</strong>：</p>
<ul>
<li>漏报成本高的任务（如癌症筛查、安全监控）；</li>
<li>需要“尽可能找出所有正类样本”的场景。</li>
</ul>
<p>果然， 这些学术性的、结论性的东西之后看完仍然是一头雾水。想要区分这些指标，还需要深刻理解他们分别是为了解决什么问题的，所谓<strong>知其然，知其所以然</strong></p>
<h3 id="这三类基础指标，怎么结合其他符合指标一起使用？"><a href="#这三类基础指标，怎么结合其他符合指标一起使用？" class="headerlink" title="这三类基础指标，怎么结合其他符合指标一起使用？"></a>这三类基础指标，怎么结合其他符合指标一起使用？</h3>]]></content>
      <categories>
        <category>评测</category>
      </categories>
  </entry>
</search>
